# Tool Chain: Adjust Tool Chain
# Edit as oml

# Dump gcc specs
SPECFILE=`dirname $(${OML_TARGET}-gcc -print-libgcc-file-name)`/specs &&
${OML_TARGET}-gcc -dumpspecs > tempspecfile

# Modify dumped tempspecfile file to set the default dynamic interpreter
# to /tools/lib/ld-musl-$ARCH.so.1
sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' tempspecfile

# check with
grep "/tools/lib/ld-musl-x86_64.so.1" tempspecfile --color=auto

# Install new spec file
mv -vf tempspecfile $SPECFILE &&
unset SPECFILE

GCC_INCLUDEDIR=`dirname $(${OML_TARGET}-gcc -print-libgcc-file-name)`/include &&
find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
unset GCC_INCLUDEDIR

# OPTIONAL: Test
# Check basic functions (compiling and linking) of the new toolchain are working as 
# expected. To perform a sanity check, run the following commands: 
echo 'int main(){}' > dummy.c
${OML_TARGET}-gcc -B/tools/lib dummy.c
readelf -l a.out | grep ': /tools'

# If everything is working correctly, there should be no errors, and the output of 
# the last command will be of the form: 
# [Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]

# Clean up after testing
rm -v dummy.c a.out
