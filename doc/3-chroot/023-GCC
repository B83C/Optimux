# Final System: GCC
# This section is done in Chroot environment

# ISL required for graphite-built GCC
tar -xf ../pkgs/isl-0.23.tar.bz2 && \
mv -v isl-0.23 isl

# Apply patches from Alpine Linux
for p in 0001-posix_memalign \
  0003-Turn-on-Wl-z-relro-z-now-by-default  \
  0004-Turn-on-D_FORTIFY_SOURCE-2-by-default-for-C-C-ObjC-O \
  0006-Enable-Wformat-and-Wformat-security-by-default \
  0007-Enable-Wtrampolines-by-default \
  0009-Ensure-that-msgfmt-doesn-t-encounter-problems-during \
  0010-Don-t-declare-asprintf-if-defined-as-a-macro \
  0011-libiberty-copy-PIC-objects-during-build-process \
  0012-libitm-disable-FORTIFY \
  0013-libgcc_s \
  0014-nopie \
  0015-libffi-use-__linux__-instead-of-__gnu_linux__-for-mu \
  0016-dlang-update-zlib-binding \
  0017-dlang-fix-fcntl-on-mips-add-libucontext-dep \
  0018-ada-fix-shared-linking \
  0019-build-fix-CXXFLAGS_FOR_BUILD-passing \
  0020-add-fortify-headers-paths \
  0021-Alpine-musl-package-provides-libssp_nonshared.a.-We- \
  0023-Pure-64-bit-MIPS \
  0024-use-pure-64-bit-configuration-where-appropriate \
  0025-always-build-libgcc_eh.a \
  0027-ada-musl-support-fixes \
  0028-gcc-go-Use-_off_t-type-instead-of-_loff_t \
  0029-gcc-go-Don-t-include-sys-user.h \
  0030-gcc-go-Fix-ucontext_t-on-PPC64 \
  0031-gcc-go-Fix-handling-of-signal-34-on-musl \
  0032-gcc-go-Use-int64-type-as-offset-argument-for-mmap \
  0034-gcc-go-signal-34-is-special-on-musl-libc \
  0035-gcc-go-Prefer-_off_t-over-_off64_t \
  0036-gcc-go-undef-SETCONTEXT_CLOBBERS_TLS-in-proc.c \
  0037-gcc-go-link-to-libucontext \
  0038-gcc-go-Disable-printing-of-unaccessible-ppc64-struct \
  0041-Use-generic-errstr.go-implementation-on-musl \
  0042-Disable-ssp-on-nostdlib-nodefaultlibs-and-ffreestand \
  0043-configure-Add-enable-autolink-libatomic-use-in-LINK_ \
  0044-DP-Use-push-state-pop-state-for-gold-as-well-when-li
do
  patch -Np1 -i ../patches/gcc-alpine/$p.patch
done

# Build in a dedicated directory
mkdir -v build && cd build

# Disable features not used
export  NOFF="--disable-libstdcxx-pch "
export NOFF+="--disable-nls "
export NOFF+="--disable-multilib "
export NOFF+="--disable-bootstrap "
export NOFF+="--disable-symvers "
export NOFF+="--disable-libsanitizer "
export NOFF+="--disable-libssp "
export NOFF+="--disable-libmpx "
export NOFF+="--disable-libmudflap "
export NOFF+="--disable-fixed-point "
export NOFF+="--disable-sjlj-exceptions "
export NOFF+="--disable-werror "

# Enable graphite
export XCONFIG="--with-ppl=yes --with-cloog=yes "

# Choose a microarchitecture that matches the target CPU:
# For Intel:
# skylake, ivybridge, haswell, sandybridge, nehalem, westmere
# For AMD
# znver1, znver2, znver3, bdver3, btver2, bdver2, bdver1, btver1, amdfam10
# For more info, go to:
# https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html
export cma="ivybridge"

# Enable features for x86_54
#export XTRA86="--with-arch=x86-64 "
export XTRA86="--with-arch=${cma} "

# Optimize build.
export   CFLAGS="-march=${cma} -g1 -O3 -fstack-protector "
export  CFLAGS+="-Wl,-z,max-page-size=0x1000 "
export CXXFLAGS="-march=${cma} -g -O3  -Wl,-z,max-page-size=0x1000"
export CFLAGS_FOR_TARGET="$CFLAGS -march=${cma} -fno-semantic-interposition "
export CXXFLAGS_FOR_TARGET="$CXXFLAGS -march=${cma} -fno-semantic-interposition "

# Cannot build GCC with CFLAGS, CXXFLAGS and LDFLAGS set with configure:
# configure: error: *** A compiler with support for C++11 language features is required.
# BUT setting CFLAGS, CXXFLAGS & LDFLAGS in environment works.
# Can build GGC to support LTO but not build GCC using LTO
#export LDFLAGS="-flto -Wl,-O2 -Wl,--as-needed "
#export CFLAGS="-flto $CFLAGS"
#export CXXFLAGS="-flto $CXXFLAGS"

# Configure source
#CFLAGS="$CFLAGS" \
#CXXFLAGS="CXXFLAGS" \
SED=sed  libat_cv_have_ifunc=no       \
../configure --prefix=/usr            \
             --build="${TRUPLE}"\
             --with-system-zlib       \
             --with-isl \
             --with-linker-hash-style=gnu \
             --enable-languages=c,c++,lto \
             --enable-threads=posix \
             --enable-clocale=generic \
             --enable-tls \
             --enable-libstdcxx-time \
             --enable-fully-dynamic-string \
             --enable-default-pie \
             --enable-default-ssp \
             --enable-linker-build-id \
             --enable-checking=release \
             --enable-cloog-backend \
             --enable-__cxa_atexit  \
             --enable-lto \
             --enable-plugins \
             --with-pkgversion="Optimux-${cma} 1.0" \
             $NOFF $XTRA86 $XCONFIG

# Build
make 

# Install
make install

# Build useful utilities
cc -fpie $CFLAGS_FOR_TARGET ../../files/musl/getent.c -o getent
cc -fpie $CFLAGS_FOR_TARGET ../../files/musl/getconf.c -o getconf
cc -fpie $CFLAGS_FOR_TARGET ../../files/musl/iconv.c -o iconv

cp -v getent  /usr/bin/
cp -v getconf /usr/bin/
cp -v iconv   /usr/bin/
cp -v ../../files/musl/getent.1   /usr/share/man/man1/
cp -v ../../files/musl/getconf.1  /usr/share/man/man1/

# Create a symlink required by the FHS for "historical" reasons
ln -sv ../usr/bin/cpp /lib

# Many packages use the name cc to call the C compiler. To 
# satisfy those packages, create a symlink
ln -sv gcc /usr/bin/cc

# Add a compatibility symlink to enable building programs with 
# Link Time Optimization (LTO): 
install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/11.2.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

# clean up
unset CFLAGS CXXFLAGS LDFLAGS NOFF XTRA86 XCONFIG
unset CFLAGS_FOR_TARGET  CXXFLAGS_FOR_TARGET

# Test final system's toolchain:
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
# Should output:
# [Requesting program interpreter: /lib/ld-musl-x86_64.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-arm.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-aarch64.so.1]
grep  'crt[1in].o succeeded' dummy.log
# Should output:
# attempt to open /usr/lib/gcc/x86_64-linux-musl/11.2.0/../../../../lib/Scrt1.o succeeded
# attempt to open /usr/lib/gcc/x86_64-linux-musl/11.2.0/../../../../lib/crti.o succeeded
# attempt to open /usr/lib/gcc/x86_64-linux-musl/11.2.0/../../../../lib/crtn.o succeeded
grep -B2 '^ /usr/lib/gcc' dummy.log
# Should output:
# #include <...> search starts here:
# /usr/local/include
# /usr/include
# /usr/lib/gcc/$ARCH-linux-musl/11.2.0/include
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
# Should output:
# SEARCH_DIR("/usr/$ARCH-pc-linux-musl/lib64")
# SEARCH_DIR("/usr/local/lib64")
# SEARCH_DIR("/lib64")
# SEARCH_DIR("/usr/lib64")
# SEARCH_DIR("/usr/x86_64-pc-linux-musl/lib")
# SEARCH_DIR("/usr/local/lib")
# SEARCH_DIR("/lib")
# SEARCH_DIR("/usr/lib");

# If all is well, remove test files:
rm -v dummy.c a.out dummy.log
